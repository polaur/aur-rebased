# Maintainer: Piotr Gorski <lucjan.lucjanov@gmail.com>
# Contributor: Christian Hesse <mail@eworm.de>
# Contributor: Dave Reisner <dreisner@archlinux.org> ([core] package)
# Contributor: Thomas BÃ¤chler <thomas@archlinux.org> ([core] package)

pkgname=mkinitcpio-git
pkgver=39.1.r56.g815fb37
pkgrel=1
pkgdesc='Modular initramfs image creation utility - git checkout'
arch=('any')
url='https://gitlab.archlinux.org/archlinux/mkinitcpio/mkinitcpio'
license=('GPL')
depends=('awk' 'mkinitcpio-busybox' 'kmod' 'util-linux' 'libarchive' 'coreutils'
         'bash' 'binutils' 'diffutils' 'findutils' 'grep' 'gzip' 'filesystem' 'zstd' 'systemd')
checkdepends=('bats' 'bats-assert' 'lzop')
makedepends=('git' 'asciidoctor' 'meson')
optdepends=('xz: Use lzma or xz compression for the initramfs image'
            'bzip2: Use bzip2 compression for the initramfs image'
            'lzop: Use lzo compression for the initramfs image'
            'lz4: Use lz4 compression for the initramfs image'
            'mkinitcpio-nfs-utils: Support for root filesystem on NFS'
            'systemd-ukify: alternative UKI generator')
provides=('mkinitcpio' 'initramfs')
conflicts=('mkinitcpio')
backup=('etc/mkinitcpio.conf')
source=('git+https://gitlab.archlinux.org/archlinux/mkinitcpio/mkinitcpio')
sha256sums=('SKIP')

_backports=(
)

_reverts=(
)

pkgver() {
  cd mkinitcpio
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
} 

prepare() {
  cd mkinitcpio

  local _c _l
  for _c in "${_backports[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git cherry-pick --mainline 1 --no-commit "${_c}"
  done
  for _c in "${_reverts[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git revert --mainline 1 --no-commit "${_c}"
  done

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done
}

build() {
	meson setup --prefix=/usr --buildtype=plain mkinitcpio build
}

check() {
	meson test -C build
}


package() {
	meson install -C build --destdir "$pkgdir"
}
